from __future__ import print_function
import sys
from pacolib import *

print ('Require Export paconotation.')
print ('Require Import pacotac.')
print ('Set Implicit Arguments.')
print ('')

print ('(** ** Type Class for acc, mult, fold and unfold')
print ('*)')
print ('')
print ('Class paco_class (A : Prop) :=')
print ('{ pacoacctyp: Type')
print ('; pacoacc : pacoacctyp')
print ('; pacomulttyp: Type')
print ('; pacomult : pacomulttyp')
print ('; pacofoldtyp: Type')
print ('; pacofold : pacofoldtyp')
print ('; pacounfoldtyp: Type')
print ('; pacounfold : pacounfoldtyp')
print ('}.')
print ('')
print ('Definition get_paco_cls {A} {cls: paco_class A} (a: A) := cls.')
print ('')
print ('Create HintDb paco.')
print ('')
print ('Ltac paco_class TGT method :=')
print ('  let typ := fresh "_typ_" in let lem := fresh "_lem_" in')
print ('  let TMP := fresh "_tmp_" in let X := fresh "_X_" in')
print ('  let CLS := fresh "_CLS_" in')
print ('  evar (typ: Type); evar (lem: typ);')
print ('  assert(TMP: TGT -> True) by (')
print ('    intros X; set (CLS := method _ (get_paco_cls X));')
print ('    repeat red in CLS; clear X; revert lem;')
print ('    match goal with [CLS := ?v |-_] => instantiate (1:= v) end;')
print ('    clear CLS; exact I);')
print ('  clear TMP; unfold typ in *; clear typ; revert lem.')
print ('')

print ('(** ** pfold tactic')
print ('  - [pfold]')
print ('*)')
print ('')
print ('Ltac pfold := let x := fresh "_x_" in')
print ('  repeat red;')
print ('  match goal with [|- ?G] => paco_class G (@pacofold) end;')
print ('  intro x; match goal with [x:=?lem|-_] => clear x; eapply lem end.')
print ('')

print ('(** ** punfold tactic')
print ('  - [punfold H]')
print ('*)')
print ('')
print ('Ltac punfold H := let x := fresh "_x_" in')
print ('  repeat red in H;')
print ('  let G := type of H in paco_class G (@pacounfold);')
print ('  intro x; match goal with [x:=?lem|-_] => clear x; eapply lem in H end;')
print ('  eauto with paco.')
print ('')

print ('(** ** pmult tactic')
print ('  - [pmult]')
print ('*)')
print ('')
print ('Ltac pmult := let x := fresh "_x_" in')
print ('  repeat red;')
print ('  match goal with [|- ?G] => paco_class G (@pacomult) end;')
print ('  intro x; match goal with [x:=?lem|-_] => clear x; eapply lem end.')
print ('')

print ('(** ** pcofix tactic')
print ('  - [pcofix CIH [with r]]')
print ('*)')
print ('')
print ('Tactic Notation "pcofix" ident(CIH) "with" ident(r) :=')
print ('  let x := fresh "_x_" in')
print ('  generalize _paco_mark_cons; repeat intro; repeat red;') 
print ('  match goal with [|- ?G] =>')
print ('  paco_class G (@pacoacc); intro x;')
print ('  match goal with [x:=?lem|-_] => clear x;')
print ('    paco_revert_hyp _paco_mark;')
print ('    pcofix CIH using lem with r')
print ('  end end.')
print ('')
print ('Tactic Notation "pcofix" ident(CIH) := pcofix CIH with r.')
print ('')

print ('(** ** [pclearbot] simplifies all hypotheses of the form [upaco{n} gf bot{n}] to [paco{n} gf bot{n}].')
print ('*)')
print ()
print ('Ltac pclearbot :=')
print ('  let X := fresh "_X" in')
print ('  repeat match goal with')
print ('  | [H: context[pacoid] |- _] => red in H; destruct H as [H|X]; [|contradiction X]')
print ('  end.')
print ()

print ('(** ** [pdestruct H] and [pinversion H]')
print ('*)')
print ()
print ('Ltac pdestruct H := punfold H; destruct H; pclearbot.')
print ()
print ('Ltac pinversion H := punfold H; inversion H; pclearbot.')
print ()

print ('(** ** pmonauto tactic')
print ('  - [pmonauto]')
print ('*)')
print ('')
print ('Ltac pmonauto :=')
print ('  let IN := fresh "IN" in try (repeat intro; destruct IN; eauto; fail).')
print ('')
