from __future__ import print_function
import sys
from pacolib import *

if len(sys.argv) < 2:
    sys.stderr.write('\nUsage: '+sys.argv[0]+' relsize\n\n')
    sys.exit(1)

relsize = int(sys.argv[1])
n = relsize

print ('Require Import paco'+str(n)+'.')
print ('Require Import Setoids.Setoid.')
print ('Set Implicit Arguments.')
print ('')

print ('Section Respectful'+str(n)+'.')
print ('')

for i in range(n):
    print ('Variable T'+str(i)+' : '+ifpstr(i,'forall'),end='')
    for j in range(i):
        print (' (x'+str(j)+': @T'+str(j)+itrstr(" x",j)+')',end='')
    print (ifpstr(i,', ')+'Type.')
print ('')

print ('Local Notation rel := (rel'+str(n)+itrstr(' T', n)+').')
print ('')

print ('Variable gf: rel -> rel.')
print ('Hypothesis gf_mon: monotone'+str(n)+' gf.')
print ('')

print ('Inductive sound'+str(n)+' (clo: rel -> rel): Prop :=')
print ('| sound'+str(n)+'_intro')
print ('    (MON: monotone'+str(n)+' clo)')
print ('    (SOUND:')
print ('       forall r (PFIX: r <'+str(n)+'= gf (clo r)),')
print ('         r <'+str(n)+'= paco'+str(n)+' gf bot'+str(n)+')')
print ('.')
print ('Hint Constructors sound'+str(n)+'.')
print ('')

print ('Structure respectful'+str(n)+' (clo: rel -> rel) : Prop :=')
print ('  respectful'+str(n)+'_intro {')
print ('      MON: monotone'+str(n)+' clo;')
print ('      RESPECTFUL:')
print ('        forall l r (LE: l <'+str(n)+'= r) (GF: l <'+str(n)+'= gf r),')
print ('          clo l <'+str(n)+'= gf (clo r);')
print ('    }.')
print ('Hint Constructors respectful'+str(n)+'.')
print ('')

print ('Inductive gres'+str(n)+' (r: rel)'+itrstr(' e', n)+' : Prop :=')
print ('| gres'+str(n)+'_intro')
print ('    clo')
print ('    (RES: respectful'+str(n)+' clo)')
print ('    (CLO: clo r'+itrstr(' e', n)+')')
print ('.')
print ('Hint Constructors gres'+str(n)+'.')

print ('Lemma gfclo'+str(n)+'_mon: forall clo, sound'+str(n)+' clo -> monotone'+str(n)+' (compose gf clo).')
print ('Proof.')
print ('  intros; destruct H; red; intros.')
print ('  eapply gf_mon; [apply IN|intros; eapply MON0; [apply PR|apply LE]].')
print ('Qed.')
print ('Hint Resolve gfclo'+str(n)+'_mon : paco.')
print ('')

print ('Lemma sound'+str(n)+'_is_gf: forall clo (UPTO: sound'+str(n)+' clo),')
print ('    paco'+str(n)+' (compose gf clo) bot'+str(n)+' <'+str(n)+'= paco'+str(n)+' gf bot'+str(n)+'.')
print ('Proof.')
print ('  intros. _punfold PR; [|apply gfclo'+str(n)+'_mon, UPTO]. edestruct UPTO.')
print ('  eapply (SOUND (paco'+str(n)+' (compose gf clo) bot'+str(n)+')).')
print ('  - intros. _punfold PR0; [|apply gfclo'+str(n)+'_mon, UPTO].')
print ('    eapply (gfclo'+str(n)+'_mon UPTO); [apply PR0| intros; destruct PR1; [apply H|destruct H]].')
print ('  - pfold. apply PR.')
print ('Qed.')
print ('')

print ('Lemma respectful'+str(n)+'_is_sound'+str(n)+': respectful'+str(n)+' <1= sound'+str(n)+'.')
print ('Proof.')
print ('  intro clo.')
print ('  set (rclo := fix rclo clo n (r: rel) :=')
print ('         match n with')
print ('         | 0 => r')
print ('         | S n\' => rclo clo n\' r \\'+str(n)+'/ clo (rclo clo n\' r)')
print ('         end).')
print ('  intros. destruct PR. econstructor; [apply MON0|].')
print ('  intros. set (rr'+itrstr(' e', n)+' := exists n, rclo clo n r'+itrstr(' e', n)+').')
print ('  assert (rr'+itrstr(' x', n)+') by (exists 0; apply PR); clear PR.')
print ('  cut (forall n, rclo clo n r <'+str(n)+'= gf (rclo clo (S n) r)).')
print ('  { intro X; revert'+itrstr(' x', n)+' H; pcofix CIH; intros.')
print ('    unfold rr in *; destruct H0.')
print ('    pfold. eapply gf_mon.')
print ('    - apply X. apply H.')
print ('    - intros. right. apply CIH. exists (S x). apply PR.')
print ('  }')
print ('  induction n; intros.')
print ('  - eapply gf_mon.')
print ('    + clear RESPECTFUL0. eapply PFIX, PR.')
print ('    + intros. right. eapply PR0.')
print ('  - destruct PR.')
print ('    + eapply gf_mon; [eapply IHn, H0|]. intros. left. apply PR.')
print ('    + eapply gf_mon; [eapply RESPECTFUL0; [|apply IHn|]|]; intros.')
print ('      * left; apply PR.')
print ('      * apply H0.')
print ('      * right; apply PR.')
print ('Qed.')
print ('')

print ('Lemma respectful'+str(n)+'_compose')
print ('      clo0 clo1')
print ('      (RES0: respectful'+str(n)+' clo0)')
print ('      (RES1: respectful'+str(n)+' clo1):')
print ('  respectful'+str(n)+' (compose clo0 clo1).')
print ('Proof.')
print ('  intros. destruct RES0, RES1.')
print ('  econstructor.')
print ('  - repeat intro. eapply MON0; [apply IN|].')
print ('    intros. eapply MON1; [apply PR|apply LE].')
print ('  - intros. eapply RESPECTFUL0; [| |apply PR].')
print ('    + intros. eapply MON1; [apply PR0|apply LE].')
print ('    + intros. eapply RESPECTFUL1; [apply LE| apply GF| apply PR0].')
print ('Qed.')
print ('')

print("Lemma grespectful"+str(n)+"_mon: monotone"+str(n)+" gres"+str(n)+".")
print("Proof.")
print("  red. intros.")
print("  destruct IN; destruct RES; exists clo; [|eapply MON0; [eapply CLO| eapply LE]].")
print("  constructor; [eapply MON0|].")
print("  intros. eapply RESPECTFUL0; [apply LE0|apply GF|apply PR].")
print("Qed.")
print('')

print ('Lemma grespectful'+str(n)+'_respectful'+str(n)+': respectful'+str(n)+' gres'+str(n)+'.')
print ('Proof.')
print ('  econstructor; [apply grespectful'+str(n)+'_mon|intros].')
print ('  destruct PR; destruct RES; eapply gf_mon with (r:=clo r).')
print ('  eapply RESPECTFUL0; [apply LE|apply GF|apply CLO].')
print ('  intros. econstructor; [constructor; [apply MON0|apply RESPECTFUL0]|apply PR].')
print ('Qed.')
print ('')

print ('Lemma gfgres'+str(n)+'_mon: monotone'+str(n)+' (compose gf gres'+str(n)+').')
print ('Proof.')
print ('  destruct grespectful'+str(n)+'_respectful'+str(n)+'.')
print ('  unfold monotone'+str(n)+'. intros. eapply gf_mon; [eapply IN|].')
print ('  intros. eapply MON0;[apply PR|apply LE].')
print ('Qed.')
print ('Hint Resolve gfgres'+str(n)+'_mon : paco.')
print ('')

print ('Lemma grespectful'+str(n)+'_greatest: forall clo (RES: respectful'+str(n)+' clo), clo <'+str(n+1)+'= gres'+str(n)+'.')
print ('Proof. intros. econstructor;[apply RES|apply PR]. Qed.')
print ('')

print ('Lemma grespectful'+str(n)+'_incl: forall r, r <'+str(n)+'= gres'+str(n)+' r.')
print ('Proof.')
print ('  intros; eexists (fun x => x).')
print ('  - econstructor.')
print ('    + red; intros; apply LE, IN.')
print ('    + intros; apply GF, PR0.')
print ('  - apply PR.')
print ('Qed.')
print ('Hint Resolve grespectful'+str(n)+'_incl.')
print ('')

print ('Lemma grespectful'+str(n)+'_compose: forall clo (RES: respectful'+str(n)+' clo) r,')
print ('    clo (gres'+str(n)+' r) <'+str(n)+'= gres'+str(n)+' r.')
print ('Proof.')
print ('  intros; eapply grespectful'+str(n)+'_greatest with (clo := compose clo gres'+str(n)+'); [|apply PR].')
print ('  apply respectful'+str(n)+'_compose; [apply RES|apply grespectful'+str(n)+'_respectful'+str(n)+'].')
print ('Qed.')
print ('')

print ('Lemma grespectful'+str(n)+'_incl_rev: forall r,')
print ('    gres'+str(n)+' (paco'+str(n)+' (compose gf gres'+str(n)+') r) <'+str(n)+'= paco'+str(n)+' (compose gf gres'+str(n)+') r.')
print ('Proof.')
print ('  intro r; pcofix CIH; intros; pfold.')
print ('  eapply gf_mon, grespectful'+str(n)+'_compose, grespectful'+str(n)+'_respectful'+str(n)+'.')
print ('  destruct grespectful'+str(n)+'_respectful'+str(n)+'; eapply RESPECTFUL0, PR; intros; [apply grespectful'+str(n)+'_incl; right; apply CIH, grespectful'+str(n)+'_incl, PR0|].')
print ('  _punfold PR0; [|apply gfgres'+str(n)+'_mon].')
print ('  eapply gfgres'+str(n)+'_mon; [apply PR0|].')
print ('  intros; destruct PR1.')
print ('  - left. eapply paco'+str(n)+'_mon; [apply H| apply CIH0].')
print ('  - right. eapply CIH0, H.')
print ('Qed.')
print ('')

print ('Inductive rclo'+str(n)+' clo (r: rel): rel :=')
print ('| rclo'+str(n)+'_incl')
print ('   '+itrstr(' e', n)+'')
print ('    (R: r'+itrstr(' e', n)+'):')
print ('    @rclo'+str(n)+' clo r'+itrstr(' e', n)+'')
print ('| rclo'+str(n)+'_step\'')
print ('    r\''+itrstr(' e', n)+'')
print ('    (R\': r\' <'+str(n)+'= rclo'+str(n)+' clo r)')
print ('    (CLOR\':clo r\''+itrstr(' e', n)+'):')
print ('    @rclo'+str(n)+' clo r'+itrstr(' e', n)+'')
print ('| rclo'+str(n)+'_gf')
print ('    r\''+itrstr(' e', n)+'')
print ('    (R\': r\' <'+str(n)+'= rclo'+str(n)+' clo r)')
print ('    (CLOR\':@gf r\''+itrstr(' e', n)+'):')
print ('    @rclo'+str(n)+' clo r'+itrstr(' e', n)+'')
print ('.')

print ('Lemma rclo'+str(n)+'_mon clo:')
print ('  monotone'+str(n)+' (rclo'+str(n)+' clo).')
print ('Proof.')
print ('  repeat intro. induction IN.')
print ('  - econstructor 1. apply LE, R.')
print ('  - econstructor 2; [intros; eapply H, PR| eapply CLOR\'].')
print ('  - econstructor 3; [intros; eapply H, PR| eapply CLOR\'].')
print ('Qed.')
print ('Hint Resolve rclo'+str(n)+'_mon: paco.')
print ('')

print ('Lemma rclo'+str(n)+'_base')
print ('      clo')
print ('      (MON: monotone'+str(n)+' clo):')
print ('  clo <'+str(n+1)+'= rclo'+str(n)+' clo.')
print ('Proof.')
print ('  intros. econstructor 2; [intros; apply PR0|].')
print ('  eapply MON; [apply PR|intros; constructor; apply PR0].')
print ('Qed.')
print ('')

print ('Lemma rclo'+str(n)+'_step')
print ('      (clo: rel -> rel) r:')
print ('  clo (rclo'+str(n)+' clo r) <'+str(n)+'= rclo'+str(n)+' clo r.')
print ('Proof.')
print ('  intros. econstructor 2; [intros; apply PR0|apply PR].')
print ('Qed.')
print ('')

print ('Lemma rclo'+str(n)+'_rclo'+str(n)+'')
print ('      clo r')
print ('      (MON: monotone'+str(n)+' clo):')
print ('  rclo'+str(n)+' clo (rclo'+str(n)+' clo r) <'+str(n)+'= rclo'+str(n)+' clo r.')
print ('Proof.')
print ('  intros. induction PR.')
print ('  - eapply R.')
print ('  - econstructor 2; [eapply H | eapply CLOR\'].')
print ('  - econstructor 3; [eapply H | eapply CLOR\'].')
print ('Qed.')
print ('')

print ('Structure weak_respectful'+str(n)+' (clo: rel -> rel) : Prop :=')
print ('  weak_respectful'+str(n)+'_intro {')
print ('      WEAK_MON: monotone'+str(n)+' clo;')
print ('      WEAK_RESPECTFUL:')
print ('        forall l r (LE: l <'+str(n)+'= r) (GF: l <'+str(n)+'= gf r),')
print ('          clo l <'+str(n)+'= gf (rclo'+str(n)+' clo r);')
print ('    }.')
print ('Hint Constructors weak_respectful'+str(n)+'.')
print ('')

print ('Lemma weak_respectful'+str(n)+'_respectful'+str(n)+'')
print ('      clo (RES: weak_respectful'+str(n)+' clo):')
print ('  respectful'+str(n)+' (rclo'+str(n)+' clo).')
print ('Proof.')
print ('  inversion RES. econstructor; [eapply rclo'+str(n)+'_mon|]. intros.')
print ('  induction PR; intros.')
print ('  - eapply gf_mon; [apply GF, R|]. intros.')
print ('    apply rclo'+str(n)+'_incl. apply PR.')
print ('  - eapply gf_mon.')
print ('    + eapply WEAK_RESPECTFUL0; [|apply H|apply CLOR\'].')
print ('      intros. eapply rclo'+str(n)+'_mon; [apply R\', PR|apply LE].')
print ('    + intros. apply rclo'+str(n)+'_rclo'+str(n)+';[apply WEAK_MON0|apply PR].')
print ('  - eapply gf_mon; [apply CLOR\'|].')
print ('    intros. eapply rclo'+str(n)+'_mon; [apply R\', PR| apply LE].')
print ('Qed.')
print ('')

print ('Lemma upto'+str(n)+'_init:')
print ('  paco'+str(n)+' (compose gf gres'+str(n)+') bot'+str(n)+' <'+str(n)+'= paco'+str(n)+' gf bot'+str(n)+'.')
print ('Proof.')
print ('  apply sound'+str(n)+'_is_gf.')
print ('  apply respectful'+str(n)+'_is_sound'+str(n)+'.')
print ('  apply grespectful'+str(n)+'_respectful'+str(n)+'.')
print ('Qed.')
print ('')

print ('Lemma upto'+str(n)+'_final:')
print ('  paco'+str(n)+' gf <'+str(n+1)+'= paco'+str(n)+' (compose gf gres'+str(n)+').')
print ('Proof.')
print ('  pcofix CIH. intros. _punfold PR; [|apply gf_mon]. pfold.')
print ('  eapply gf_mon; [|apply grespectful'+str(n)+'_incl].')
print ('  eapply gf_mon; [apply PR|]. intros. right.')
print ('  inversion PR0; [apply CIH, H | apply CIH0, H].')
print ('Qed.')
print ('')

print ('Lemma upto'+str(n)+'_step')
print ('      r clo (RES: weak_respectful'+str(n)+' clo):')
print ('  clo (paco'+str(n)+' (compose gf gres'+str(n)+') r) <'+str(n)+'= paco'+str(n)+' (compose gf gres'+str(n)+') r.')
print ('Proof.')
print ('  intros. apply grespectful'+str(n)+'_incl_rev.')
print ('  assert (RES\' := weak_respectful'+str(n)+'_respectful'+str(n)+' RES).')
print ('  eapply grespectful'+str(n)+'_greatest; [apply RES\'|].')
print ('  eapply rclo'+str(n)+'_base; [apply RES|].')
print ('  inversion RES. apply PR.')
print ('Qed.')
print ('')

print ('Lemma upto'+str(n)+'_step_under')
print ('      r clo (RES: weak_respectful'+str(n)+' clo):')
print ('  clo (gres'+str(n)+' r) <'+str(n)+'= gres'+str(n)+' r.')
print ('Proof.')
print ('  intros. apply weak_respectful'+str(n)+'_respectful'+str(n)+' in RES.')
print ('  eapply grespectful'+str(n)+'_compose; [apply RES|].')
print ('  econstructor 2; [intros; constructor 1; apply PR0 | apply PR].')
print ('Qed.')
print ('')

print ('End Respectful'+str(n)+'.')
print ('')

print ("Lemma grespectful"+str(n)+"_impl"+itrstr(" T",n)+" (gf gf': "+"rel"+str(n)+itrstr(" T",n)+" -> "+"rel"+str(n)+itrstr(" T",n)+") r"+itrstr(' x', n))
print ("    (PR: gres"+str(n)+" gf r"+itrstr(' x', n)+")")
print ("    (EQ: forall r"+itrstr(' x', n)+", gf r"+itrstr(' x', n)+" <-> gf' r"+itrstr(' x', n)+"):")
print ("  gres"+str(n)+" gf' r"+itrstr(' x', n)+".")
print ("Proof.")
print ("  intros. destruct PR. econstructor; [|apply CLO].")
print ("  destruct RES. econstructor; [apply MON0|].")
print ("  intros. rewrite <- EQ. eapply RESPECTFUL0; [apply LE| |apply PR].")
print ("  intros. rewrite EQ. apply GF, PR0.")
print ("Qed.")
print ("")

print ("Lemma grespectful"+str(n)+"_iff"+itrstr(" T",n)+" (gf gf': "+"rel"+str(n)+itrstr(" T",n)+" -> "+"rel"+str(n)+itrstr(" T",n)+") r"+itrstr(' x', n))
print ("    (EQ: forall r"+itrstr(' x', n)+", gf r"+itrstr(' x', n)+" <-> gf' r"+itrstr(' x', n)+"):")
print ("  gres"+str(n)+" gf r"+itrstr(' x', n)+" <-> gres"+str(n)+" gf' r"+itrstr(' x', n)+".")
print ("Proof.")
print ("  split; intros.")
print ("  - eapply grespectful"+str(n)+"_impl; [apply H | apply EQ].")
print ("  - eapply grespectful"+str(n)+"_impl; [apply H | symmetry; apply EQ].")
print ("Qed.")
print ("")

print ('Hint Constructors sound'+str(n)+'.')
print ('Hint Constructors respectful'+str(n)+'.')
print ('Hint Constructors gres'+str(n)+'.')
print ('Hint Resolve gfclo'+str(n)+'_mon : paco.')
print ('Hint Resolve gfgres'+str(n)+'_mon : paco.')
print ('Hint Resolve grespectful'+str(n)+'_incl.')
print ('Hint Resolve rclo'+str(n)+'_mon: paco.')
print ('Hint Constructors weak_respectful'+str(n)+'.')
print ('')

print ('Ltac pupto'+str(n)+'_init := eapply upto'+str(n)+'_init; [eauto with paco|].')
print ('Ltac pupto'+str(n)+'_final := first [eapply upto'+str(n)+'_final; [eauto with paco|] | eapply grespectful'+str(n)+'_incl].')
print ('Ltac pupto'+str(n)+' H := first [eapply upto'+str(n)+'_step|eapply upto'+str(n)+'_step_under]; [|eapply H|]; [eauto with paco|].')
print ('')
